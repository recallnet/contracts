/**

Generated by the following Solidity interface...
```solidity
interface IBlobReaderFacade {
    event ReadRequestClosed(bytes32 id);
    event ReadRequestOpened(bytes32 id, bytes32 blobHash, uint256 readOffset, uint256 readLength, address callbackAddress, uint256 callbackMethod);
    event ReadRequestPending(bytes32 id);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "event",
    "name": "ReadRequestClosed",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ReadRequestOpened",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "blobHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "readOffset",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "readLength",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "callbackAddress",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "callbackMethod",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ReadRequestPending",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod IBlobReaderFacade {
    use super::*;
    use ::alloy_sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"",
    );
    /**Event with signature `ReadRequestClosed(bytes32)` and selector `0x9a8c63a9b921adb4983af5ca5dd1649500a411a34894cb1c0f9fab740b6f75ed`.
```solidity
event ReadRequestClosed(bytes32 id);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ReadRequestClosed {
        #[allow(missing_docs)]
        pub id: ::alloy_sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy_sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ReadRequestClosed {
            type DataTuple<'a> = (::alloy_sol_types::sol_data::FixedBytes<32>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ReadRequestClosed(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                154u8,
                140u8,
                99u8,
                169u8,
                185u8,
                33u8,
                173u8,
                180u8,
                152u8,
                58u8,
                245u8,
                202u8,
                93u8,
                209u8,
                100u8,
                149u8,
                0u8,
                164u8,
                17u8,
                163u8,
                72u8,
                148u8,
                203u8,
                28u8,
                15u8,
                159u8,
                171u8,
                116u8,
                11u8,
                111u8,
                117u8,
                237u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { id: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy_sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ReadRequestClosed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ReadRequestClosed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ReadRequestClosed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ReadRequestOpened(bytes32,bytes32,uint256,uint256,address,uint256)` and selector `0xd540be3f3450d40e6b169d0adac00a1e18cba05ee46950b4de6383b76c780f59`.
```solidity
event ReadRequestOpened(bytes32 id, bytes32 blobHash, uint256 readOffset, uint256 readLength, address callbackAddress, uint256 callbackMethod);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ReadRequestOpened {
        #[allow(missing_docs)]
        pub id: ::alloy_sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub blobHash: ::alloy_sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub readOffset: ::alloy_sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub readLength: ::alloy_sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub callbackAddress: ::alloy_sol_types::private::Address,
        #[allow(missing_docs)]
        pub callbackMethod: ::alloy_sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy_sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ReadRequestOpened {
            type DataTuple<'a> = (
                ::alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy_sol_types::sol_data::Uint<256>,
                ::alloy_sol_types::sol_data::Uint<256>,
                ::alloy_sol_types::sol_data::Address,
                ::alloy_sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ReadRequestOpened(bytes32,bytes32,uint256,uint256,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                213u8,
                64u8,
                190u8,
                63u8,
                52u8,
                80u8,
                212u8,
                14u8,
                107u8,
                22u8,
                157u8,
                10u8,
                218u8,
                192u8,
                10u8,
                30u8,
                24u8,
                203u8,
                160u8,
                94u8,
                228u8,
                105u8,
                80u8,
                180u8,
                222u8,
                99u8,
                131u8,
                183u8,
                108u8,
                120u8,
                15u8,
                89u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    id: data.0,
                    blobHash: data.1,
                    readOffset: data.2,
                    readLength: data.3,
                    callbackAddress: data.4,
                    callbackMethod: data.5,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy_sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                    <::alloy_sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blobHash),
                    <::alloy_sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.readOffset),
                    <::alloy_sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.readLength),
                    <::alloy_sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callbackAddress,
                    ),
                    <::alloy_sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.callbackMethod),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ReadRequestOpened {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ReadRequestOpened> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ReadRequestOpened) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ReadRequestPending(bytes32)` and selector `0x6b9c9f2ecba3015efc370b4e57621c55d8c1f17805015860f0b337a0288512e4`.
```solidity
event ReadRequestPending(bytes32 id);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ReadRequestPending {
        #[allow(missing_docs)]
        pub id: ::alloy_sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy_sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ReadRequestPending {
            type DataTuple<'a> = (::alloy_sol_types::sol_data::FixedBytes<32>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ReadRequestPending(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                107u8,
                156u8,
                159u8,
                46u8,
                203u8,
                163u8,
                1u8,
                94u8,
                252u8,
                55u8,
                11u8,
                78u8,
                87u8,
                98u8,
                28u8,
                85u8,
                216u8,
                193u8,
                241u8,
                120u8,
                5u8,
                1u8,
                88u8,
                96u8,
                240u8,
                179u8,
                55u8,
                160u8,
                40u8,
                133u8,
                18u8,
                228u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { id: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy_sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ReadRequestPending {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ReadRequestPending> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ReadRequestPending) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    ///Container for all the [`IBlobReaderFacade`](self) events.
    pub enum IBlobReaderFacadeEvents {
        #[allow(missing_docs)]
        ReadRequestClosed(ReadRequestClosed),
        #[allow(missing_docs)]
        ReadRequestOpened(ReadRequestOpened),
        #[allow(missing_docs)]
        ReadRequestPending(ReadRequestPending),
    }
    #[automatically_derived]
    impl IBlobReaderFacadeEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                107u8,
                156u8,
                159u8,
                46u8,
                203u8,
                163u8,
                1u8,
                94u8,
                252u8,
                55u8,
                11u8,
                78u8,
                87u8,
                98u8,
                28u8,
                85u8,
                216u8,
                193u8,
                241u8,
                120u8,
                5u8,
                1u8,
                88u8,
                96u8,
                240u8,
                179u8,
                55u8,
                160u8,
                40u8,
                133u8,
                18u8,
                228u8,
            ],
            [
                154u8,
                140u8,
                99u8,
                169u8,
                185u8,
                33u8,
                173u8,
                180u8,
                152u8,
                58u8,
                245u8,
                202u8,
                93u8,
                209u8,
                100u8,
                149u8,
                0u8,
                164u8,
                17u8,
                163u8,
                72u8,
                148u8,
                203u8,
                28u8,
                15u8,
                159u8,
                171u8,
                116u8,
                11u8,
                111u8,
                117u8,
                237u8,
            ],
            [
                213u8,
                64u8,
                190u8,
                63u8,
                52u8,
                80u8,
                212u8,
                14u8,
                107u8,
                22u8,
                157u8,
                10u8,
                218u8,
                192u8,
                10u8,
                30u8,
                24u8,
                203u8,
                160u8,
                94u8,
                228u8,
                105u8,
                80u8,
                180u8,
                222u8,
                99u8,
                131u8,
                183u8,
                108u8,
                120u8,
                15u8,
                89u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for IBlobReaderFacadeEvents {
        const NAME: &'static str = "IBlobReaderFacadeEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ReadRequestClosed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ReadRequestClosed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ReadRequestClosed)
                }
                Some(
                    <ReadRequestOpened as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ReadRequestOpened as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ReadRequestOpened)
                }
                Some(
                    <ReadRequestPending as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ReadRequestPending as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ReadRequestPending)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for IBlobReaderFacadeEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ReadRequestClosed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ReadRequestOpened(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ReadRequestPending(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ReadRequestClosed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ReadRequestOpened(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ReadRequestPending(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
}
